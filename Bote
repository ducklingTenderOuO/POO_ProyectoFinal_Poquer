/**
 * Gestiona las fichas apostadas por los jugadores y su distribuciÃ³n al ganador.
 *
 * @author (AYJB - LGLM)
 * @version (MAY 2025)
 */

package proyectofinal;
import java.util.List;

public class Bote {
    private int cantidad;
    private int ultimaApuesta;

    public Bote() {
        this.cantidad = 0;
    }

    /**
     * Recibe fichas apostadas por un jugador.
     * @param cantidad Fichas a agregar al bote.
     */
    public void agregarApuesta(int cantidad) {
        if (cantidad > 0) {
            this.cantidad += cantidad;
            this.ultimaApuesta = cantidad;
        }
    }

    public int getUltimaApuesta() {
        return this.ultimaApuesta;
    }

    /**
     * Entrega el bote al jugador ganador.
     */
    public void entregarGanador(Jugador ganador) {
        if (ganador != null && ganador.estaActivo()) {
            ganador.ajustarFichas(this.cantidad);
            this.cantidad = 0;
        }
    }

    /**
     * Entrega el bote dividido entre varios ganadores (para empates).
     */
    public void dividirBote(List<Jugador> ganadores) {
        if (ganadores != null && !ganadores.isEmpty()) {
            int montoPorJugador = this.cantidad / ganadores.size();
            for (Jugador ganador : ganadores) {
                if (ganador.estaActivo()) {
                    ganador.ajustarFichas(montoPorJugador);
                }
            }
            this.cantidad = 0;
        }
    }

    public void limpiar() {
        cantidad = 0;
    }
    
    public int getCantidad() {
        return this.cantidad;
    }

    @Override
    public String toString() {
        return "Bote: " + this.cantidad + " fichas";
    }
}
